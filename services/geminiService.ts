
import { GoogleGenAI, Modality, GenerateContentResponse } from '@google/genai';
import { fileToBase64 } from '../utils/fileUtils';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const PROMPT = `Analyze the person in the first image and the clothing item in the second image. 
Generate a new, photorealistic image showing the person from the first image wearing the outfit from the second image.
Preserve the person's pose, body shape, and facial features. 
The lighting and background should blend seamlessly and look natural.
The output must only be the final edited image. Do not output any text.`;

export const generateVirtualTryOnImage = async (personFile: File, outfitFile: File): Promise<string> => {
  const model = 'gemini-2.5-flash-image-preview';

  const [personData, outfitData] = await Promise.all([
    fileToBase64(personFile),
    fileToBase64(outfitFile),
  ]);

  const personImagePart = {
    inlineData: {
      data: personData.base64,
      mimeType: personData.mimeType,
    },
  };

  const outfitImagePart = {
    inlineData: {
      data: outfitData.base64,
      mimeType: outfitData.mimeType,
    },
  };

  const textPart = {
    text: PROMPT,
  };

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [personImagePart, outfitImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    // Find the image part in the response
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType: string = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error('No image was generated by the model.');

  } catch (error) {
    console.error('Error calling Gemini API:', error);
    throw new Error('Failed to generate image. The model may be unable to process the request.');
  }
};
